import scala.sys.process._

val scalaVersions = Seq("2.13.5", "2.12.15")
val macrosParadiseVersion = "2.1.1"

enablePlugins(GitVersioning, GitBranchPrompt)
git.useGitDescribe := true

(ThisBuild / organization) := "xyz.kamyar"
(ThisBuild / scalacOptions) ++= Seq(
  "-deprecation",
  "-feature",
  "-Xfatal-warnings",
  "-Xlint"
)
(ThisBuild / licenses) := Seq(("BSD New", url("http://opensource.org/licenses/BSD-3-Clause")))
ThisBuild / homepage := Some(url("https://github.com/kammoh/sbt-jni"))
ThisBuild / developers := List(
  Developer(
    "kammoh",
    "Kamyar Mohajerani",
    "kammoh@gmail.com",
    url("https://kamyar.xyz")
  ),
  Developer(
    "jodersky",
    "Jakob Odersky",
    "jakob@odersky.com",
    url("https://jakob.odersky.com")
  ),
)

lazy val root = (project in file("."))
  .aggregate(macros, plugin)
  .enablePlugins(GitVersioning, GitBranchPrompt)
  .settings(
    publish := {},
    publishLocal := {},
    git.useGitDescribe := true,
    // make sbt-pgp happy
    publishTo := Some(Resolver.file("Unused transient repository", target.value / "unusedrepo")),
    addCommandAlias("test-plugin", ";+macros/publishLocal;scripted")
  )

lazy val macros = (project in file("macros"))
  .disablePlugins(ScriptedPlugin)
  .settings(
    name := "sbt-jni-macros",
    crossScalaVersions := scalaVersions,
    libraryDependencies += "org.scala-lang" % "scala-compiler" % scalaVersion.value % Provided,
    libraryDependencies += "org.scala-lang" % "scala-reflect" % scalaVersion.value,

    libraryDependencies ++= {
      CrossVersion.partialVersion(scalaVersion.value) match {
        case Some((2, n)) if n >= 13 => Seq()
        case _ => Seq(
          compilerPlugin("org.scalamacros" % "paradise" % macrosParadiseVersion cross CrossVersion.full)
        )
      }
    },
    Compile / scalacOptions ++= {
      CrossVersion.partialVersion(scalaVersion.value) match {
        case Some((2, n)) if n >= 13 => Seq("-Ymacro-annotations")
        case _ => Seq()
      }
    }
  )

lazy val plugin = (project in file("plugin"))
  .enablePlugins(SbtPlugin)
  .settings(
    name := "sbt-jni",
    libraryDependencies += "org.ow2.asm" % "asm" % "9.1",
    // make project settings available to source
    (Compile / sourceGenerators) += Def.task {
      val src = s"""|/* Generated by sbt */
                    |package ch.jodersky.sbt.jni
                    |
                    |private[jni] object ProjectVersion {
                    |  final val MacrosParadise = "${macrosParadiseVersion}"
                    |  final val Macros = "${version.value}"
                    |}
                    |""".stripMargin
      val file = sourceManaged.value / "ch" / "jodersky" / "sbt" / "jni" / "ProjectVersion.scala"
      IO.write(file, src)
      Seq(file)
    }.taskValue,
    scriptedLaunchOpts := Seq(
      "-Dplugin.version=" + version.value,
      "-Xmx2g", "-Xss2m"
    )
  )
